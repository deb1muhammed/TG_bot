import os
import json
import logging
import shutil
from datetime import datetime
from typing import Dict, Any
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.txt
load_dotenv("config.txt")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = [int(id) for id in os.getenv("ADMINS", "").split(",") if id.isdigit()]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not set in config file")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if os.path.exists(log_dir) and not os.path.isdir(log_dir):
    os.remove(log_dir)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–º–µ—Å—Ç–æ –ø–∞–ø–∫–∏
if not os.path.exists(log_dir):
    os.makedirs(log_dir)
logging.basicConfig(
    filename=os.path.join(log_dir, "bot.log"),
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def create_backup(file_path: str) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤."""
    try:
        if not os.path.exists("backups"):
            os.makedirs("backups")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"backups/{os.path.basename(file_path)}_{timestamp}"
        shutil.copy2(file_path, backup_path)

        backups = sorted(
            [f for f in os.listdir("backups") if f.startswith(os.path.basename(file_path))]
        )
        if len(backups) > 10:
            os.remove(os.path.join("backups", backups[0]))
    except Exception as e:
        logger.error(f"Failed to create backup for {file_path}: {e}")

def load_data(file_path: str, default: Any = None) -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(f"Failed to load {file_path}: {e}")
        return default if default is not None else {}

def save_data(file_path: str, data: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞."""
    try:
        if os.path.exists(file_path):
            create_backup(file_path)
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Failed to save {file_path}: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    keyboard = [
        [KeyboardButton("üìö –¢–µ–æ—Ä–∏—è")],
        [KeyboardButton("‚ùì –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton("üìù –¢–µ—Å—Ç—ã")],
        [KeyboardButton("üñºÔ∏è –¢–µ—Å—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º")],
        [KeyboardButton("üß© –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
    ]
    if user_id in ADMINS:
        keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–µ–Ω—é
def get_admin_panel_menu() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç")],
        [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started the bot")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data["state"] = "main_menu"
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –¥–µ—Ä–º–∞—Ç–æ–≤–µ–Ω–µ—Ä–æ–ª–æ–≥–∏–∏!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu(user_id),
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    user_message = update.message.text
    user_id = update.effective_user.id
    current_state = context.user_data.get("state", "main_menu")

    logger.info(f"handle_menu: User {user_id}, state: {current_state}, message: {user_message}")

    if current_state == "admin_panel":
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

    main_menu = get_main_menu(user_id)

    sections = {
        "üìö –¢–µ–æ—Ä–∏—è": ("theory", "topics", "topics", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É"),
        "‚ùì –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã": ("questions", "questions", "questions", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"),
        "üìù –¢–µ—Å—Ç—ã": ("tests", "tests", "tests", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç"),
        "üñºÔ∏è –¢–µ—Å—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º": ("image_tests", "image_tests", "image_tests", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"),
        "üß© –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏": ("tasks", "tasks", "tasks", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É"),
    }

    if user_message in sections:
        section, key, display_key, prompt = sections[user_message]
        data = load_data(f"data/{section}/structure.json", {key: []})[key]
        if not data:
            await update.message.reply_text(
                f"{prompt.split()[1]} –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu
            )
        else:
            context.user_data["state"] = section
            keyboard = [[KeyboardButton(f"{item['name']}")] for item in data] + [
                [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            await update.message.reply_text(
                f"{prompt}:\n" + "\n".join([f"{item['id']}. {item['name']}" for item in data]),
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            )
    elif user_message == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user_id in ADMINS:
        context.user_data["state"] = "admin_panel"
        context.user_data["admin_state"] = None
        await update.message.reply_text(
            "–í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_panel_menu(),
        )
    elif user_message == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["state"] = "main_menu"
        context.user_data["admin_state"] = None
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_message = update.message.text
    user_id = update.effective_user.id
    current_state = context.user_data.get("state", "main_menu")
    admin_state = context.user_data.get("admin_state")

    logger.info(f"handle_admin_panel: User {user_id}, state: {current_state}, admin_state: {admin_state}, message: {user_message}")

    if current_state != "admin_panel" or admin_state:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞

    if user_id not in ADMINS:
        context.user_data["state"] = "main_menu"
        context.user_data["admin_state"] = None
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
            reply_markup=get_main_menu(user_id),
        )
        return

    main_menu = get_main_menu(user_id)
    admin_panel_menu = get_admin_panel_menu()

    sections = {
        "–¢–µ–æ—Ä–∏—è": ("theory", "topics"),
        "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã": ("questions", "questions"),
        "–¢–µ—Å—Ç—ã": ("tests", "tests"),
        "–¢–µ—Å—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º": ("image_tests", "image_tests"),
        "–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏": ("tasks", "tasks"),
    }

    if user_message == "–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç":
        context.user_data["admin_state"] = "waiting_add_section"
        keyboard = [[KeyboardButton(section)] for section in sections.keys()] + [
            [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
    elif user_message == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç":
        context.user_data["admin_state"] = "waiting_edit_section"
        keyboard = [[KeyboardButton(section)] for section in sections.keys()] + [
            [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
    elif user_message == "–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç":
        context.user_data["admin_state"] = "waiting_delete_section"
        keyboard = [[KeyboardButton(section)] for section in sections.keys()] + [
            [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
    elif user_message == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["state"] = "main_menu"
        context.user_data["admin_state"] = None
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu,
        )
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_panel_menu,
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_message = update.message.text
    user_id = update.effective_user.id
    current_state = context.user_data.get("state", "main_menu")
    admin_state = context.user_data.get("admin_state")

    logger.info(f"handle_admin_input: User {user_id}, state: {current_state}, admin_state: {admin_state}, message: {user_message}")

    if current_state != "admin_panel" or not admin_state:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –Ω–µ—Ç admin_state

    if user_id not in ADMINS:
        context.user_data["state"] = "main_menu"
        context.user_data["admin_state"] = None
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
            reply_markup=get_main_menu(user_id),
        )
        return

    main_menu = get_main_menu(user_id)
    admin_panel_menu = get_admin_panel_menu()

    sections = {
        "–¢–µ–æ—Ä–∏—è": ("theory", "topics"),
        "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã": ("questions", "questions"),
        "–¢–µ—Å—Ç—ã": ("tests", "tests"),
        "–¢–µ—Å—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º": ("image_tests", "image_tests"),
        "–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏": ("tasks", "tasks"),
    }

    try:
        if admin_state == "waiting_add_section":
            if user_message in sections:
                context.user_data["admin_section"] = user_message
                context.user_data["admin_state"] = "waiting_add_item"
                await update.message.reply_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{user_message}'.\n"
                    "–î–ª—è '–¢–µ–æ—Ä–∏—è' –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: section|theme_name (–Ω–∞–ø—Ä–∏–º–µ—Ä: theory|–ò–Ω—Ñ–µ–∫—Ü–∏–∏ –∫–æ–∂–∏).\n"
                    "–î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–∑–µ–º–∞?).",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
                    ),
                )
            else:
                context.user_data["admin_state"] = None
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=admin_panel_menu,
                )
        elif admin_state == "waiting_add_item":
            section_name = context.user_data["admin_section"]
            section, key = sections[section_name]
            if section_name == "–¢–µ–æ—Ä–∏—è":
                section_part, item_name = user_message.split("|")
                item_name = item_name.strip()
            else:
                item_name = user_message.strip()
            path = f"data/{section}/structure.json"
            data = load_data(path, {key: []})
            new_id = str(len(data[key]) + 1)
            data[key].append({"id": new_id, "name": item_name})
            save_data(path, data)
            logger.info(f"User {user_id} added {key[:-1]} '{item_name}' to '{section}'")
            await update.message.reply_text(
                f"–≠–ª–µ–º–µ–Ω—Ç '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '{section_name}'.",
                reply_markup=admin_panel_menu,
            )
            context.user_data["admin_state"] = None
            context.user_data["admin_section"] = None
        elif admin_state == "waiting_edit_section":
            if user_message in sections:
                context.user_data["admin_section"] = user_message
                context.user_data["admin_state"] = "waiting_edit_item_list"
                section, key = sections[user_message]
                data = load_data(f"data/{section}/structure.json", {key: []})[key]
                if not data:
                    context.user_data["admin_state"] = None
                    await update.message.reply_text(
                        f"–í —Ä–∞–∑–¥–µ–ª–µ '{user_message}' –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                        reply_markup=admin_panel_menu,
                    )
                else:
                    keyboard = [[KeyboardButton(f"{item['name']}")] for item in data] + [
                        [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                    ]
                    await update.message.reply_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '{user_message}':\n"
                        + "\n".join([f"{item['id']}. {item['name']}" for item in data]),
                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                    )
            else:
                context.user_data["admin_state"] = None
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=admin_panel_menu,
                )
        elif admin_state == "waiting_edit_item_list":
            section_name = context.user_data["admin_section"]
            section, key = sections[section_name]
            data = load_data(f"data/{section}/structure.json", {key: []})[key]
            selected_item = next((item for item in data if item["name"] == user_message), None)
            if selected_item:
                context.user_data["admin_selected_item"] = selected_item
                context.user_data["admin_state"] = "waiting_edit_item"
                await update.message.reply_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è '{selected_item['name']}':",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
                    ),
                )
            else:
                context.user_data["admin_state"] = None
                await update.message.reply_text(
                    "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=admin_panel_menu,
                )
        elif admin_state == "waiting_edit_item":
            new_name = user_message.strip()
            section_name = context.user_data["admin_section"]
            section, key = sections[section_name]
            data = load_data(f"data/{section}/structure.json", {key: []})
            selected_item = context.user_data["admin_selected_item"]
            selected_item["name"] = new_name
            save_data(f"data/{section}/structure.json", data)
            logger.info(f"User {user_id} edited {key[:-1]} to '{new_name}' in '{section}'")
            await update.message.reply_text(
                f"–≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'.",
                reply_markup=admin_panel_menu,
            )
            context.user_data["admin_state"] = None
            context.user_data["admin_section"] = None
            context.user_data["admin_selected_item"] = None
        elif admin_state == "waiting_delete_section":
            if user_message in sections:
                context.user_data["admin_section"] = user_message
                context.user_data["admin_state"] = "waiting_delete_item_list"
                section, key = sections[user_message]
                data = load_data(f"data/{section}/structure.json", {key: []})[key]
                if not data:
                    context.user_data["admin_state"] = None
                    await update.message.reply_text(
                        f"–í —Ä–∞–∑–¥–µ–ª–µ '{user_message}' –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                        reply_markup=admin_panel_menu,
                    )
                else:
                    keyboard = [[KeyboardButton(f"{item['name']}")] for item in data] + [
                        [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                    ]
                    await update.message.reply_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '{user_message}':\n"
                        + "\n".join([f"{item['id']}. {item['name']}" for item in data]),
                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                    )
            else:
                context.user_data["admin_state"] = None
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=admin_panel_menu,
                )
        elif admin_state == "waiting_delete_item_list":
            section_name = context.user_data["admin_section"]
            section, key = sections[section_name]
            data = load_data(f"data/{section}/structure.json", {key: []})
            selected_item = next((item for item in data[key] if item["name"] == user_message), None)
            if selected_item:
                data[key] = [item for item in data[key] if item != selected_item]
                save_data(f"data/{section}/structure.json", data)
                logger.info(f"User {user_id} deleted {key[:-1]} '{selected_item['name']}' from '{section}'")
                await update.message.reply_text(
                    f"–≠–ª–µ–º–µ–Ω—Ç '{selected_item['name']}' —É–¥–∞–ª–µ–Ω.",
                    reply_markup=admin_panel_menu,
                )
            else:
                context.user_data["admin_state"] = None
                await update.message.reply_text(
                    "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=admin_panel_menu,
                )
            context.user_data["admin_state"] = None
            context.user_data["admin_section"] = None
        elif user_message == "–û—Ç–º–µ–Ω–∞":
            context.user_data["admin_state"] = None
            context.user_data["admin_section"] = None
            context.user_data["admin_selected_item"] = None
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=admin_panel_menu,
            )
    except ValueError as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
            ),
        )
    except Exception as e:
        logger.error(f"Error in admin input: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=admin_panel_menu,
        )
        context.user_data["admin_state"] = None
        context.user_data["admin_section"] = None
        context.user_data["admin_selected_item"] = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏."""
    logger.error(f"Update {update} caused error: {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_input))
    app.add_error_handler(error_handler)
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()